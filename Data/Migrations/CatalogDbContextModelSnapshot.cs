// <auto-generated />
using System;
using Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    partial class CatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.BrandOfCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BrandOfCars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mercedes-AMG"
                        });
                });

            modelBuilder.Entity("Data.Entities.Mercedes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandOfCarId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MercedesClassId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandOfCarId");

                    b.HasIndex("MercedesClassId");

                    b.HasIndex("OrderId");

                    b.ToTable("Mercedeses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandOfCarId = 1,
                            ClassId = 3,
                            Discount = 2,
                            HorsePower = 375,
                            ImgUrl = "https://images.netdirector.co.uk/gforces-auto/image/upload/w_548,h_365,q_auto,c_fill,f_auto,fl_lossy/auto-client/5d18acbf1848174117e1b0223235a361/e_220_d_4matic.png",
                            Model = "E450 4MATIC",
                            Price = 3735256m,
                            Volume = 3.0,
                            Year = 2024
                        },
                        new
                        {
                            Id = 2,
                            BrandOfCarId = 1,
                            ClassId = 3,
                            Discount = 5,
                            HorsePower = 194,
                            ImgUrl = "https://images.netdirector.co.uk/gforces-auto/image/upload/w_548,h_365,q_auto,c_fill,f_auto,fl_lossy/auto-client/acfe7552173b3f6c863cee630a2345a0/e_220_d.png",
                            Model = "E 220 d",
                            Price = 2823744m,
                            Volume = 2.0,
                            Year = 2024
                        },
                        new
                        {
                            Id = 3,
                            BrandOfCarId = 1,
                            ClassId = 1,
                            Discount = 2,
                            HorsePower = 136,
                            ImgUrl = "https://images.netdirector.co.uk/gforces-auto/image/upload/w_548,h_365,q_auto,c_fill,f_auto,fl_lossy/auto-client/aae4042503cc00d78b7772f9c12f7271/a180.png",
                            Model = "A 180",
                            Price = 1998166m,
                            Volume = 1.95,
                            Year = 2024
                        },
                        new
                        {
                            Id = 4,
                            BrandOfCarId = 2,
                            ClassId = 1,
                            Discount = 0,
                            HorsePower = 306,
                            ImgUrl = "https://images.netdirector.co.uk/gforces-auto/image/upload/w_548,h_365,q_auto,c_fill,f_auto,fl_lossy/auto-client/3172c0ee5ae878080765fbc455e54e6e/a35.png",
                            Model = "A 35 AMG 4MATIC",
                            Price = 2794320m,
                            Volume = 2.0,
                            Year = 2024
                        },
                        new
                        {
                            Id = 5,
                            BrandOfCarId = 1,
                            ClassId = 2,
                            Discount = 15,
                            HorsePower = 168,
                            ImgUrl = "https://images.netdirector.co.uk/gforces-auto/image/upload/w_548,h_365,q_auto,c_fill,f_auto,fl_lossy/auto-client/6cc5b5823b68a44ccafcb0d49ebdb4d7/c_200.png",
                            Model = "C 180",
                            Price = 2148646m,
                            Volume = 1.5,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("Data.Entities.MercedesClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MercedesClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A-Class"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C-Class"
                        },
                        new
                        {
                            Id = 3,
                            Name = "E-Class"
                        });
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Data.Entities.Mercedes", b =>
                {
                    b.HasOne("Data.Entities.BrandOfCar", "BrandOfCar")
                        .WithMany("Mercedeses")
                        .HasForeignKey("BrandOfCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.MercedesClass", "MercedesClass")
                        .WithMany("Mercedeses")
                        .HasForeignKey("MercedesClassId");

                    b.HasOne("Data.Entities.Order", null)
                        .WithMany("Mercedeses")
                        .HasForeignKey("OrderId");

                    b.Navigation("BrandOfCar");

                    b.Navigation("MercedesClass");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.BrandOfCar", b =>
                {
                    b.Navigation("Mercedeses");
                });

            modelBuilder.Entity("Data.Entities.MercedesClass", b =>
                {
                    b.Navigation("Mercedeses");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Navigation("Mercedeses");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
